# –∏–º–ø–æ—Ä—Ç—ã
import time
import validators
import sqlite3

import telebot
from telebot import types
from threading import Thread

import config
from WildBerries import WildBerries
from reserved_rep import replaceSymbol

bot = telebot.TeleBot(config.API_TOKEN)

PRODUCTS = 'db/products.db'
USERS = 'db/users.db'

product_user_id = None
product_title = None
product_price = None
selected_price = None
product_url = None
delete_message = None


# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã
def main_cycle():
    try:
        while True:
            start_time = time.time()

            connection = sqlite3.connect(PRODUCTS)
            cursor = connection.cursor()

            cursor.execute('SELECT * FROM Products')
            products = cursor.fetchall()

            for product in products:
                print(product)
                user_id = product[1]
                users_price = int(product[4])
                saved_price = int(product[3])
                url = product[5]

                wildberries = WildBerries(url)

                html = wildberries.get_html()
                if html:
                    try:
                        parse = wildberries.parse_data()

                        title = parse['h1']
                        sku = parse['sku']
                        price = int(parse['price'])
                        brand = replaceSymbol(parse['brand'])
                        image = parse['image']

                        if users_price >= price:
                            link = f'[‚Ä¢ *{brand} / {replaceSymbol(title)}*]({url})'
                            bot.send_photo(user_id, image,
                                           f'–ù–∞–∑–≤–∞–Ω–∏–µ:\n{link}\n\n'
                                           f'–ê—Ä—Ç–∏–∫—É–ª: ‚Ä¢ __{sku}__\n'
                                           f'–ë—Ä–µ–Ω–¥: ‚Ä¢ __{brand}__\n\n'
                                           f'üî•*–°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã*üî•:\n ‚Ä¢ {str(price)} ‚ÇΩ  _~{str(saved_price)} ‚ÇΩ~_\n\n'
                                           f'_¬´–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –±–µ–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏, –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è '
                                           f'—Å—É–º–º–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –í–∞—à–µ–π –ª–∏—á–Ω–æ–π —Å–∫–∏–¥–∫–∏ –≤ –õ–ö WildBerries¬ª_',
                                           parse_mode='MarkdownV2')

                            cursor.execute('DELETE FROM Products WHERE id = ?', (product[0],))
                            cursor.execute("UPDATE Products SET id = id - 1 WHERE id > ?", (product[0],))
                            connection.commit()

                    except Exception as e:
                        print(e)
                else:
                    print(f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –Ω–µ —Ä–∞–±–æ—á–∞—è:\n(user: {product[1]}, product: {product[2]})")
            connection.close()

            end_time = time.time()
            work_time = end_time - start_time

            if 300 - work_time > 0:
                time.sleep(300 - work_time)
    except Exception as e:
        print(e)
        print("–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∞—Å—å!")


# –∑–∞–ø—É—Å–∫ main_cycle –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
thread = Thread(target=main_cycle)
thread.start()


# message_handler –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö
@bot.message_handler(commands=['delete'])
def choose_delete(message):
    try:
        connection = sqlite3.connect(PRODUCTS)
        cursor = connection.cursor()

        cursor.execute("SELECT title FROM Products WHERE user_id = ?",
                       (message.from_user.id,))
        products = cursor.fetchall()

        if not products:
            bot.send_message(message.chat.id, f'*–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.*\n'
                                              f'–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start', parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, "üìå*–°–ü–ò–°–û–ö –í–ê–®–ò–• –¢–û–í–ê–†–û–í:*", parse_mode='Markdown')
            for product in products:
                bot.send_message(message.chat.id, f"{product[0]}")

            # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)

            button = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞‚ùå")
            keyboard.add(button)

            bot.send_message(message.chat.id, "_¬´–ù–∞–ø–∏—à–∏—Ç–µ *–ü–û–õ–ù–û–ï* –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ¬ª_",
                             reply_markup=keyboard,
                             parse_mode='MarkdownV2')
            bot.register_next_step_handler(message, delete)
        connection.close()

    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, "–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")


# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
def delete(message):
    global delete_message

    try:
        if message.text == "–û—Ç–º–µ–Ω–∞‚ùå":
            bot.send_message(message.chat.id, '–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ωüëç')
        else:
            product_name = message.text

            connection = sqlite3.connect(PRODUCTS)
            cursor = connection.cursor()

            cursor.execute("SELECT * FROM Products WHERE user_id = ? AND title = ?",
                           (message.from_user.id, product_name))
            product = cursor.fetchone()
            if not product:
                # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = types.InlineKeyboardMarkup()

                button1 = types.InlineKeyboardButton(text="–î–∞", callback_data="delete_yes")
                button2 = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel")
                keyboard.add(button1, button2)

                delete_message = bot.send_message(message.chat.id, "*–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º, "
                                                                   "–ª–∏–±–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é!*",
                                                  reply_markup=types.ReplyKeyboardRemove(), parse_mode='Markdown')
                bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è?",
                                 reply_markup=keyboard, parse_mode='Markdown')
            else:
                id_ = product[0]
                cursor.execute('DELETE FROM Products WHERE user_id = ? AND title = ?',
                               (message.from_user.id, product_name))
                cursor.execute("UPDATE Products SET id = id - 1 WHERE id > ?", (id_,))
                connection.commit()

                bot.send_message(message.chat.id, "üóë–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=types.ReplyKeyboardRemove())

            connection.close()
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, "–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!", reply_markup=types.ReplyKeyboardRemove())


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
@bot.message_handler(content_types=['text'])
def send_welcome(message):
    try:
        if validators.url(message.text):
            link_request(message)
        else:
            flag = True
            connection = sqlite3.connect(USERS)
            cursor = connection.cursor()

            cursor.execute('SELECT * FROM Users')
            users = cursor.fetchall()
            for user in users:
                if user[0] == message.from_user.id:
                    flag = False
                    break
            connection.close()

            # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)

            button = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞‚ùå")
            keyboard.add(button)

            if flag:
                url_text = (f'[–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ WildBerries]('
                            f'https://www.wildberries.ru/catalog)')

                bot.send_message(message.chat.id,
                                 f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!'
                                 f'\n\n–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã. '
                                 f'\n–î–ª—è —ç—Ç–æ–≥–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å—Å—ã–ª–∫—É'
                                 f' –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç —Å —Å–∞–π—Ç–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ WildBerries.'
                                 f'\n{url_text}',
                                 reply_markup=keyboard,
                                 parse_mode='Markdown')
                bot.register_next_step_handler(message, link_request)
            else:
                url_text = f'[WildBerries](https://www.wildberries.ru)'
                bot.send_message(message.chat.id, f'–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å—Å—ã–ª–∫—É –Ω–∞ '
                                                  f'—Ç–æ–≤–∞—Ä —Å —Å–∞–π—Ç–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ {url_text}',
                                 reply_markup=keyboard,
                                 parse_mode='Markdown')
                bot.register_next_step_handler(message, link_request)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, 'üòµ‚Äçüí´–£–ø—Å! –í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')


# –ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä –∏ –µ–µ –ø—Ä–æ–≤–µ—Ä–∫–∞
def link_request(message):
    global product_title, product_url, product_price

    if message.text == "–û—Ç–º–µ–Ω–∞‚ùå":
        bot.send_message(message.chat.id, '–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ωüëç')
    else:
        search_message = bot.send_message(message.chat.id,
                                          'üïµ‚Äç–ë–æ—Ä–æ–∑–∂—É –ø—Ä–æ—Å—Ç–æ—Ä—ã WildBerries –≤ –ø–æ–∏—Å–∫–∞—Ö —Ç–æ–≤–∞—Ä–∞...',
                                          parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())

        # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)

        button = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞‚ùå")
        keyboard.add(button)

        try:
            url = message.text
            wildberries = WildBerries(url)

            html = wildberries.get_html()
            if html:
                parse = wildberries.parse_data()

                title = parse['h1']
                sku = parse['sku']
                price = parse['price']
                old_price = parse['old_price']
                brand = replaceSymbol(parse['brand'])
                image = parse['image']

                product_title = title
                product_url = url
                product_price = price

                bot.delete_message(message.chat.id, search_message.message_id)

                bot.send_photo(message.chat.id, image,
                               f'–ù–∞–∑–≤–∞–Ω–∏–µ:\n‚Ä¢ *{brand} / {replaceSymbol(title)}*\n\n'
                               f'–ê—Ä—Ç–∏–∫—É–ª: ‚Ä¢ __{sku}__\n'
                               f'–ë—Ä–µ–Ω–¥: ‚Ä¢ __{brand}__\n\n'
                               f'–¶–µ–Ω–∞:\n ‚Ä¢ {price} ‚ÇΩ  _~{old_price} ‚ÇΩ~_\n\n'
                               f'_¬´–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –±–µ–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏, –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è '
                               f'—Å—É–º–º–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –í–∞—à–µ–π –ª–∏—á–Ω–æ–π —Å–∫–∏–¥–∫–∏ –≤ –õ–ö WildBerries¬ª_',
                               parse_mode='MarkdownV2')

                bot.send_message(message.chat.id,
                                 '–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–µ–ª–∏ '
                                 '–±—ã –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä _(–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ)_',
                                 reply_markup=keyboard,
                                 parse_mode='Markdown')
                bot.register_next_step_handler(message, choose_price)

            else:
                bot.delete_message(message.chat.id, search_message.message_id)
                bot.send_message(message.chat.id,
                                 '–í–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                                 reply_markup=keyboard)
                bot.register_next_step_handler(message, link_request)

        except Exception as e:
            print(e)
            bot.delete_message(message.chat.id, search_message.message_id)
            bot.send_message(message.chat.id, 'üòµ‚Äçüí´–£–ø—Å! –í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')


# –ó–∞–ø—Ä–æ—Å –∂–µ–ª–∞–µ–º–æ–π —Ü–µ–Ω—ã
def choose_price(message):
    global selected_price, product_user_id

    if message.text == "–û—Ç–º–µ–Ω–∞‚ùå":
        bot.send_message(message.chat.id, '–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ωüëç')
    else:
        selected_price = message.text
        selected_price = str(selected_price).replace(',', '.')

        try:
            selected_price = float(selected_price)
            product_user_id = message.from_user.id

            if selected_price == int(selected_price):
                selected_price = int(selected_price)

            if selected_price <= 0:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ–µ 0')
                bot.register_next_step_handler(message, choose_price)

            elif float(selected_price) > float(product_price):
                # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = types.InlineKeyboardMarkup()

                button1 = types.InlineKeyboardButton(text="–î–∞", callback_data="1")
                button2 = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="0")
                keyboard.add(button1, button2)

                bot.send_message(message.chat.id, '–¢–æ–≤–∞—Ä —Å—Ç–æ–∏—Ç –¥–µ–≤–µ—à–ª–µ —Ç–æ–π —Å—É–º–º—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤–≤–µ–ª–∏. '
                                                  '–•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é —Å—É–º–º—É?', reply_markup=keyboard)
            else:
                msg = add_in_db()
                bot.send_message(message.chat.id, msg, reply_markup=types.ReplyKeyboardRemove())

        except ValueError:
            # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)

            button = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞‚ùå")
            keyboard.add(button)

            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ', reply_markup=keyboard)
            bot.register_next_step_handler(message, choose_price)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data == "1":
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id,
                             '–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–µ–ª–∏ '
                             '–±—ã –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä _(–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ)_',
                             parse_mode='Markdown')
            bot.register_next_step_handler(call.message, choose_price)
        elif call.data == "0":
            bot.delete_message(call.message.chat.id, call.message.message_id)
            msg = add_in_db()
            bot.send_message(call.message.chat.id, msg)
        elif call.data == "delete_yes":
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, "_¬´–ù–∞–ø–∏—à–∏—Ç–µ *–ü–û–õ–ù–û–ï* –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ¬ª_",
                             parse_mode='MarkdownV2')
            bot.register_next_step_handler(call.message, delete)
        elif call.data == "cancel":
            bot.delete_message(delete_message.chat.id, delete_message.message_id)
            bot.delete_message(call.message.chat.id, call.message.message_id)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö
def add_in_db():
    products = sqlite3.connect(PRODUCTS)
    cursor = products.cursor()

    cursor.execute("SELECT user_id, url FROM Products WHERE user_id = ? AND url = ?",
                   (product_user_id, product_url))
    if not cursor.fetchone():
        cursor.execute('INSERT INTO Products (user_id, title, price, selected_price, url) VALUES (?, ?, ?, ?, ?)',
                       (product_user_id, product_title, product_price, selected_price, product_url))
        products.commit()
        products.close()

        users = sqlite3.connect(USERS)
        cursor = users.cursor()

        cursor.execute("SELECT user_id FROM Users WHERE user_id = ?",
                       (product_user_id,))
        if not cursor.fetchone():
            cursor.execute('INSERT INTO Users (user_id) VALUES (?)', (product_user_id,))

        users.commit()
        users.close()
        return '‚úÖ–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω! –Ø –æ–ø–æ–≤–µ—â—É –≤–∞—Å, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤—Ä–µ–º—è'
    else:
        products.close()
        return '–Ø –Ω–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã —É–∂–µ –∫–æ–≥–¥–∞-—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –µ–≥–æ'


bot.polling(none_stop=True)
